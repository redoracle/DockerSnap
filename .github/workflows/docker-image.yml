name: Build, Push DockerSnap Image, and Create Release

on:
  workflow_dispatch:
    inputs:
      branch:
        description: Branch to deploy
        required: false
        default: main
      testing:
        description: Testing workflow
        required: false
        type: boolean
        default: false
      tag:
        description: Tag for the release (e.g., v1.0.0)
        required: false
  push:
    branches: 
      - main
    tags:
      - 'v*.*.*'   # Trigger on version tags like v1.0.0
    paths:
      - 'DockerSnap.sh'
      - 'Dockerfile'

jobs:
  build-and-push:
    env:
      DOCKER_REGISTRY: docker.io
      DS_GITHUB_REGISTRY: ghcr.io
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Set up QEMU and Docker Buildx (for multi-platform builds)
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true

      # Step 3: Check if DOCKER_USER and repository_owner are valid
      - name: Check environment variables
        run: |
          echo "DOCKER_USER=${{ secrets.DOCKER_USER }}"
          echo "GITHUB REPOSITORY OWNER=${{ github.repository_owner }}"
          if [ -z "${{ secrets.DOCKER_USER }}" ]; then
            echo "DOCKER_USER is empty, failing..."
            exit 1
          fi
          if [ -z "${{ github.repository_owner }}" ]; then
            echo "GITHUB repository owner is empty, failing..."
            exit 1
          fi

      # Step 4: Login to Docker Hub
      - name: Docker Hub Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true   # Retry even if login fails

      # Step 5: Login to GitHub Container Registry
      - name: GitHub Container Registry Login
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DS_GITHUB_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
        continue-on-error: true   # Retry even if login fails

      # Step 6: Build DockerSnap Image for multiple platforms (e.g., linux/amd64, linux/arm64)
      - name: Build DockerSnap Image
        run: |
          docker buildx create --use
          docker buildx build . --platform linux/amd64,linux/arm64 \
            -t ${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USER }}/dockersnap:latest \
            -t ${{ env.DS_GITHUB_REGISTRY }}/${{ github.repository_owner }}/dockersnap:latest \
            --push   # Push the image directly after build to avoid separate push step

      # Step 7: Add summary details
      - name: Add Summary Details
        if: always()
        run: |
          echo "## Summary Details" >> $GITHUB_STEP_SUMMARY
          echo "* Docker Image (Docker Hub): [${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USER }}/dockersnap:latest](https://${{ env.DOCKER_REGISTRY }}/r/${{ secrets.DOCKER_USER }}/dockersnap)" >> $GITHUB_STEP_SUMMARY
          echo "* Docker Image (GitHub): [${{ env.DS_GITHUB_REGISTRY }}/${{ github.repository_owner }}/dockersnap:latest](https://${{ env.DS_GITHUB_REGISTRY }}/${{ github.repository_owner }}/dockersnap)" >> $GITHUB_STEP_SUMMARY
          echo "* Branch: ${{ github.event.inputs.branch }}" >> $GITHUB_STEP_SUMMARY
          echo "* Testing: ${{ github.event.inputs.testing }}" >> $GITHUB_STEP_SUMMARY

      # Step 8: Cleanup Docker Images
      - name: Cleanup Docker Images
        run: |
          docker image prune -a --force

  create-release:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: |
      github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.tag)
    steps:
      # Step 1: Checkout the repository
      - uses: actions/checkout@v4

      # Step 2: Determine the tag
      - name: Determine Tag
        id: get_tag
        run: |
          if [ "${{ github.event_name }}" == "push" ]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          elif [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.tag }}" ]; then
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "tag=" >> $GITHUB_OUTPUT
          fi

      # Step 3: Check if the release already exists
      - name: Check if Release Exists
        id: check_release
        uses: actions/github-script@v6
        with:
          script: |
            const tag = '${{ steps.get_tag.outputs.tag }}';
            if (!tag) {
              core.setOutput('exists', 'false');
              return;
            }
            const releases = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
              per_page: 100
            });
            const release = releases.data.find(r => r.tag_name === tag);
            core.setOutput('exists', release ? 'true' : 'false');
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Step 4: Create GitHub Release (only if it doesn't exist)
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_tag.outputs.tag }}
          release_name: Release ${{ steps.get_tag.outputs.tag }}
          body: |
            ### DockerSnap Release ${{ steps.get_tag.outputs.tag }}
            - Docker images for multiple platforms have been built and pushed.
            - **Docker Hub:** [${{ env.DOCKER_REGISTRY }}/${{ secrets.DOCKER_USER }}/dockersnap:latest](https://${{ env.DOCKER_REGISTRY }}/r/${{ secrets.DOCKER_USER }}/dockersnap)
            - **GitHub Container Registry:** [${{ env.DS_GITHUB_REGISTRY }}/${{ github.repository_owner }}/dockersnap:latest](https://${{ env.DS_GITHUB_REGISTRY }}/${{ github.repository_owner }}/dockersnap)
            - **Branch:** ${{ github.event.inputs.branch }}
            - **Testing:** ${{ github.event.inputs.testing }}
        if: steps.check_release.outputs.exists != 'true'

      # Optional: Notify if Release Exists
      - name: Notify Release Exists
        if: steps.check_release.outputs.exists == 'true'
        run: |
          echo "Release for tag ${{ steps.get_tag.outputs.tag }} already exists. Skipping release creation."

      # Optional: Upload release assets
      # - name: Upload Release Asset
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }}
      #     asset_path: ./path/to/asset
      #     asset_name: asset-name
      #     asset_content_type: application/octet-stream
